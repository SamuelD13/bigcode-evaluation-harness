[["os.kill(os.getpid(), signal.SIGUSR1)"], ["bytes.fromhex('4a4b4c').decode('utf-8')"], ["all(x == myList[0] for x in myList)"], ["'{:20}'.format('Python : Very Good')"], ["s = s.decode('cp1251').encode('utf8')"], ["{k: v for k, v in kwargs.items() if v is not None}"], ["{k: v for k, v in kwargs.items() if v is not None}"], ["import os"], ["''.join(['a', 'b', 'c'])"], ["s1.intersection(s2)"], ["client.headers = {'Content-Type': 'application/json'}"], ["when.date()"], ["inputString.split('\\n')"], ["re.split('\\n', str)"], ["':'.join(b)"], ["Entry.objects.first()"], ["np.sum(arr, axis=1)"], ["import warnings"], ["' '.join(l)"], ["python hello.py htmlfilename.htm"], ["datetime.datetime.strptime(str, '%Y-%m-%d %H:%M:%S.%f')"], ["my_float = float(my_string.replace(',', '.'))"], ["float(str.replace(',', '').replace('.', '.'))"], ["import sys"], ["re.split('\\\\W+', 'Words, words, words.')"], ["f = open('Output.txt', 'a')"], ["import urllib.request"], ["import urllib.request"], ["import urllib.request"], ["import urllib.request"], ["import requests"], ["parser.add_argument('--version', action='version', version='%(prog)s 2.0')"], ["del d['c']"], ["merged_df = pd.merge(split_df, csv_df, how='left', left_on='key', right_on='key').add_suffix('_left').add_suffix('_right')"], ["s.split(' ', 4)"], ["input()"], ["app.debug = True"], ["with open('save.txt', 'w') as f:"], ["import numpy as np"], ["numpy.zeros((3,3,3))"], ["content[:content.rindex(' ')]"], ["numpy.array(x)"], ["sum(sum(i) for i in L)"], ["float.fromhex('470FC614')"], ["{k: v*2 for k, v in my_dict.items()}"], ["os.system('bash sleep.sh')"], ["', '.join(l)"], ["', '.join(myList)"], ["list(range(10, 0, -1))"], ["s = s.replace('bag, ', '')"], ["s = '.'.join(s.split('.')[::-1])"], ["datetime.datetime.fromtimestamp(s/1000.0).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]"], ["datetime.datetime.fromtimestamp(int('1236472051807')/1000).strftime('%Y-%m-%d %H:%M:%S')"], ["datetime.date.today() - datetime.timedelta(days=7)"], ["sum(x[column] for x in data)"], ["sum(x[i] for x in array)"], ["import base64"], ["{k: v for d in dicts for k, v in d.items()}"], ["{k: ''.join(v for v in values) for k, values in dicts.items()}"], ["from flask import request"], ["[item for item, count in collections.Counter(mylist).items() if count > 1]"], ["os.path.join(os.path.dirname(__file__), 'apps')"], ["sys.path.insert(0, os.path.abspath('subdir'))"], ["c.execute(\"INSERT INTO table_name (column_name) VALUES (?)\", (None,))"], ["[item for sublist in list_of_menuitems for item in sublist]"], ["a.extend(b)"], ["list(set_name)"], ["df.to_csv('np.txt', sep='\\t', index=False)"], ["df.to_csv('c:\\\\data\\\\pandas.txt', sep='\\t', index=False)"], ["x.rsplit('-', 1)"], ["str.split('-')[-1]"], ["import ftplib"], ["driver.find_element_by_id('XYZ').send_keys(Keys.ARROW_UP)"], ["np.maximum([2, 3, 4], [1, 5, 2])"], ["l = l[3:] + l[:3]"], ["for file in os.listdir('.'):"], ["for file in os.listdir(source):"], ["random.randint(1, 100)"], ["datetime.datetime.now().strftime('%f')"], ["query = db.GqlQuery(\"SELECT * FROM Schedule WHERE station = :1\", foo.key())"], ["df[df['column_name'].str.match('^f')]"], ["for row in tab:"], ["df = df[~df[['column1', 'column2']].isin([value1, value2]).any(axis=1)]"], ["\"goals: {}, penalties: {}\".format(self.goals, self.penalties)"], ["\"({} goals, ${})\".format(goals, penalties)"], ["\"({0.goals} goals, ${0.penalties})\".format(obj)"], ["L = [int(item) for sublist in L for item in sublist]"], ["r = int(''.join(map(str, [item for sublist in L for item in sublist])))"], ["L = [int(i) for i in L]"], ["with open('myfile', 'w') as f:"], ["list(filter(lambda x: x != 'X' and x != 'N', list))"], ["re.sub(r'\\b(\\w+\\b\\s+\\b\\1\\b)+', '', text)"], ["df.astype(bool).sum(axis=0)"], ["re.search('(?<=Distillr)\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe')"], ["list = 'QH QD JC KD JS'.split()"], ["re.findall(r'>.*<', line)"], ["open(filename, 'w').close()"], ["datetime.datetime.strptime(str, '%Y-%m-%d %H:%M:%S.%f')"], ["index = next((i for i, x in enumerate(thelist) if x[0] == '332'), None)"], ["''.join(c for c in text if c.isalnum() or c.isspace())"], ["re.sub('[^a-zA-Z0-9 ]', '', text.lower())"], ["plt.text(x[0], y[0], '$H_{2}0$')"], ["plt.text(x[0], y[0], '$H_{2}0$')"], ["for sublist in mylist:"], ["lst = [object() for _ in range(100)]"], ["lst = [Object() for _ in range(100)]"], ["soup.select('a[href]')"], ["df = pd.merge(df1, df2, on='Date_Time')"], ["print \"str1 = %s\" % str1"], ["str.split(delimiter)"], ["import os"], ["os.makedirs(path, exist_ok=True)"], ["os.makedirs(path, exist_ok=True)"], ["os.makedirs(path, exist_ok=True)"], ["text.replace('H3', 'H1')"], ["re.sub(r'[a-zA-Z]', '', 'aas30dsa20')"], ["filter(lambda x: x.isdigit(), aas30dsa20)"], ["soup.find('tag', attrs={'name': 'value'})"], ["records = [record for record in cursor]"], ["numpy.concatenate((A, B), axis=0)"], ["numpy.concatenate((A, B), axis=0)"], ["sum(1 for line in open(filepath))"], ["l.count('a')"], ["collections.Counter(l)"], ["collections.Counter(l)"], ["collections.Counter(l)"], ["l.count('b')"], ["shutil.copy(srcfile, dstdir)"], ["max(x, key=x.get)"], ["max(k for k, v in x.items() if v != 0)"], ["max(x, key=lambda k: x[k]) if x else None"], ["f.seek(0)"], ["df['c'] = df['a'].astype(str) + df['b'].astype(str)"], ["del d['ele']"], ["MyModel.objects.update(datetime=F('timestamp') + timedelta(days=365*100))"], ["list = ['it'] + ['was'] + ['annoying']"], ["'{:03d}'.format(x)"], ["df.index.is_monotonic_increasing or df.index.is_monotonic_decreasing"], ["list(t)"], ["t = tuple(t)"], ["list(level1)"], ["import pprint"], ["df[df['BoolCol'] == True].index.tolist()"], ["df[df['BoolCol'] == True].index.tolist()"], ["df[df['BoolCol'] == True].index.tolist()"], ["df[df['BoolCol'] == True].index.tolist()"], ["os.chdir(owd)"], ["c.execute(\"INSERT INTO table_name (column_name) VALUES (?)\", (testfield,))"], ["s = \"\\\\x89\\\\n\""], ["str(raw_string)"], ["normal_string = raw_byte_string.decode('utf-8')"], ["re.findall(r'((\\w)\\2*)', s)"], ["plt.scatter(np.random.randn(100), np.random.randn(100), facecolor='none')"], ["plt.scatter(x, y, s=1)"], ["soup.find('div', {'id': 'main-content'}).decompose()"], ["df[df['ids'].str.contains('ball')]"], ["df.columns = df.columns.set_levels([df.columns.levels[0], df.index], 1)"], ["df['index1'] = df.index"], ["df.reset_index()"], ["b[::-1]"], ["list(zip(a, b))"], ["list(zip(a, b))"], ["','.join(map(str, list_of_ints))"], ["requests.post(url, data=DATA, auth=(username, password))"], ["s = \"abcd}def}\""], ["[i for i in [1, 2, 3]]"], ["[(i['x'], i['y']) for i in d if 'x' in i and 'y' in i]"], ["os.path.splitext('hemanth.txt')[0]"], ["dict(zip(x[::2], x[1::2]))"], ["[item for sublist in lst for item in sublist]"], ["df[df['closing_price'].between(99, 101)]"], ["df.replace('\\n', '<br>', regex=True)"], ["df.replace('\\n', '<br>', regex=True)"], ["[word[i:i+2] for i in range(0, len(word), 2)]"], ["list(zip(*[iter(word)]*2))"], ["url = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[\\\\\\?=]|[\\\\/]|[%]|[\\\\*])+', myString)"], ["url = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[\\\\\\?=]|[\\\\/]|[%]|[\\\\*])+', myString)"], ["re.sub(r'[^\\w\\s]', '', mystring)"], ["from pandas.tseries.offsets import SecondWeekOfMonth"], ["matrix = [[0]*2 for _ in range(3)]"], ["str.replace(' ', '_')"], ["os.path.abspath('mydir/myfile.txt')"], ["my_string.split()"], ["os.path.splitext(filename)[0]"], ["[sum(l[:i+1]) for i in range(len(l))]"], ["re.split('/', 'Docs/src/Scripts/temp')"], ["numpy.random.permutation(r)"], ["df['D'] = df['B']"], ["for item in data:"], ["all(predicate(c) for c in string)"], ["len(os.listdir(path))"], ["c.execute('SELECT column FROM table WHERE condition')"], ["user_list = list(map(int, user_input.split()))"], ["list(map(int, user.split(',')))"], ["sorted(list, key=lambda x: (x[0], x[1]))"], ["sorted(ut, cmp=cmpfun, reverse=True)"], ["ut.sort(key=lambda x: x.count, reverse=True)"], ["sorted(ut, key=lambda x: x.count, reverse=True)"], ["driver.find_element_by_link_text('Send').click()"], ["driver.find_element_by_link_text('Send InMail').click()"], ["driver.find_element_by_link_text('Send InMail').click()"], ["'ME' + str(i)"], ["df.sort_values(by=['column_name'])"], ["with open('infile', 'r') as f:"], ["sorted(l, key=lambda x: len(x))"], ["re.findall(r'\\b\\w+d\\b', s)"], ["import re"], ["list(set(t))"], ["list(set(source_list))"], ["list(set(abracadabra))"], ["list(a)"], ["list(a[0])"], ["soup.find(text='Address:').find_next_sibling().text"], ["[ '@'.join(map(str, t)) for t in l ]"], ["['@'.join(map(str, t)) for t in l]"], ["driver.page_source"], ["import re"], ["df[df['B'] > 50][df['C'] == 900]['A']"], ["sorted(o.items())"], ["sorted(d.keys())"], ["sorted(d.items(), key=lambda x: x[0])"], ["int(\"1\")"], ["int(str)"], ["T1 = [int(i) for i in T1]"], ["subprocess.call(['/bin/sh', './test.sh'])"], ["subprocess.call(['notepad'])"], ["r = [val for pair in zip(l1, l2) for val in pair]"], ["data = 'data to be encoded'.encode('utf-8')"], ["bytes('data to be encoded', 'ascii')"], ["with open('text.txt') as f:"], ["getattr(my_object, 'my_str')"], ["{k: [d[k] for d in LD] for k in LD[0]}"], ["sum(x[0] for x in list)"], ["ast.literal_eval(u\"{'code1':1,'code2':1}\")"], ["re.findall(r'\\$\\w+', mystring)"], ["import re"], ["A[~np.in1d(A, [1, 3, 4])] = 0"], ["np.mean(a, axis=0) or np.mean(a, axis=1)"], ["import subprocess"], ["import subprocess"], ["with open('file.csv', 'w') as f:"], ["df.fillna(df.mean())"], ["datetime.datetime.fromtimestamp(int('1347517370')).strftime('%Y-%m-%d %H:%M:%S')"], ["super().do()"], ["a[a[:,0]==0 & a[:,1]==1]"], ["re.split('\\s+', str)"], ["max(len(word) for word in words)"], ["result[0]['from_user']"], ["with open('File.txt', 'r') as f:"], ["{v: k for k, v in a.items()}"], ["open('path/to/FILE_NAME.ext', 'w')"], ["df.groupby('column_name').nunique()"], ["any(k.startswith('EMP$$') for k in dict1.keys())"], ["[v for k, v in dict1.items() if k.startswith('EMP$$')]"], ["df = pd.DataFrame(sf.tolist(), columns=['email', 'list'])"], ["print('\\t'.join(map(str, list)))"], ["print u'\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('utf-8')"], ["unicode(Sopet\\xc3\\xb3n, \"utf-8\")"], ["image.resize((x, y), Image.ANTIALIAS)"], ["re.findall(r'n.+?n', s)"], ["print(f\"{1/3*100}%\")"], ["sorted(mylist, key=lambda k: k['title'])"], ["sorted(l, key=lambda x: x['title'])"], ["sorted(list, key=lambda x: (x['title'], x['title_url'], x['id']))"], ["import heapq"], ["soup.find_all('span', class_='starGryB sp')"], ["df.to_sql('test', con=engine, schema='a_schema', if_exists='append')"], ["re.findall(r'\\((.*?)\\)', s)"], ["list(set(L))"], ["with open(file, 'r') as f:"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(element)"], ["testlist.index(element)"], ["max(lis, key=lambda x:x[1])"], ["max(lis, key=lambda x:x[1])[0]"], ["time.sleep(1)"], ["str(L)"], ["models.CharField(max_length=8, default='0000000')"], ["list5.sort(key=lambda x: x.degrees)"], ["sort by multiple keys in a list of tuples"], ["(i for i in lst)"], ["[oldlist[i] for i in range(len(oldlist)) if i not in removelist]"], ["open('yourfile.txt', 'w')"], ["getattr(obj, 'attr')"], ["tuple(i[0] for i in t)"], ["list(map(lambda x: x[0], tup))"], ["df['column_name'] = df['column_name'].str.replace('old_value', 'new_value')"], ["keys, values = zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"], ["keys, values = zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"], ["zip(*original)"], ["zip(*original)"], ["keys, values = zip(*list)"], ["list(zip(*lst)) + [None]*max(0, len(lst[0])-len(lst))"], ["json.dumps(float(Decimal('3.9')))"], ["d[\"mynewkey\"] = \"mynewvalue\""], ["data['a'] = 1"], ["data['a'] = 1"], ["data['a'] = 1"], ["max(map(max, matrix))"], ["round(answer, 2)"], ["import re"], ["df[df.A.duplicated()]"], ["with open('myfile') as f:"], ["lst = [int(i) for i in open(filename.txt).read().split()]"], ["plt.colorbar(mappable)"], ["from collections import Counter"], ["re.split('\\W+', str)"], ["[(1, 2), (1, 3), (2, 3)]"], ["datetime.datetime.utcnow()"], ["list2 = [i for i in list1 if i]"], ["list2 = [x for x in list1 if x]"], ["from django.http import JsonResponse"], ["re.sub(r'\\[.*?\\]', '', example_str)"], ["re.findall(r'\\[(.*?)\\]', example_str)"], ["re.findall(r'(\\([^)]+\\))|([^()]+)', '(zyx)bc')"], ["re.findall('\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc')"], ["re.findall(r'zyx|(bc)', '(zyx)bc')"], ["['%{}%'.format(i) for i in elements]"], ["subprocess.Popen(['background-process', 'arguments'])"], ["[mydict[key] for key in mykeys]"], ["dict(x)"], ["np.mean(data, axis=0)"], ["s.replace('\"', '\\\\\"')"], ["list(str)"], ["df.plot(kind='bar', stacked=True)"], ["{v: k for k, v in myDictionary.items()}"], ["[i for i, s in enumerate(myList) if 'how' in s and 'what' in s]"], ["isinstance(obj, str)"], ["isinstance(o, str)"], ["isinstance(o, str)"], ["isinstance(o, str)"], ["isinstance(obj_to_test, str)"], ["list2.extend(list1)"], ["list1.append(mylog)"], ["c.append(a)"], ["list1.extend(mylog)"], ["b.append((a[0][0], a[0][2]))"], ["app.config['SECRET_KEY'] = 'Your_secret_string'"], ["pd.DataFrame(list(zip(*tuples)), columns=['out-1', 'out-2'])"], ["stocks_list.index('MSFT')"], ["plt.xticks(rotation=45)"], ["re.sub(r'\\W+', '', s)"], ["os.path.dirname(os.path.realpath(__file__))"], ["re.findall(r'\\\\[oO][0-7]{1,3}', str)"], ["re.split('[ ](?=[A-Z]+\\\\b)', input)"], ["re.split('(?=[A-Z])', input)"], ["requests.post(url, files=files, headers=headers, data=data)"], ["with open(filename, 'wb') as f:"], ["[dct[i] for i in lst]"], ["x[x.duplicated(subset='name')]"], ["\"{:.3f}\".format(1.923328437452)"], ["li.sort(key=lambda x: x[1], reverse=True)"], ["ax.set_rticks([0.5, 1, 1.5, 2])"], ["os.path.isabs(my_path)"], ["len(yourdict)"], ["len(yourdictfile)"], ["df.groupby('id').first()"], ["df[['A', 'B', 'C']] = df['A'].apply(lambda x: pd.Series(x))"], ["re.findall(r'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)"], ["sum(float(i) for i in lst if i)"], ["subprocess.call([\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"])"], ["q = list(reversed(q))"], ["df.groupby('group').size().plot(kind='bar', color=color)"], ["re.findall('([a-fA-F\\\\d]{32})', data)"], ["len(my_list)"], ["len(l)"], ["len(s)"], ["len(my_tuple)"], ["len(my_string)"], ["str.replace('\\\\', '')"], ["''.join('b' if c == 'a' else 'a' if c == 'b' else c for c in 'obama')"], ["shutil.rmtree('/folder_name')"], ["data['weekday'] = data['my_dt'].dt.weekday_name"], ["sorted(x.items(), key=lambda item: item[1], reverse=True)"], ["sorted(x.items(), key=lambda item: item[1], reverse=True)"], ["a = np.append(a, b)"], ["numpy.concatenate((a, b), axis=0)"], ["numpy.concatenate((a, b), axis=1)"], ["numpy.concatenate((a, b), axis=0)"], ["numpy.concatenate((a, b), axis=0)"], ["import socket"], ["df['day'] = 'sat'"], ["return HttpResponse('Unauthorized', status=401)"], ["app = Flask(__name__, template_folder='wherever')"], ["session.execute(\"INSERT INTO t1 (SELECT * FROM t2)\")"], ["c2.sort(key=lambda x: x[2])"], ["sorted(list, key=lambda x: x[0])"], ["sorted(list, key=lambda x: x[0])"], ["plt.rcParams['font.family'] = 'Arial'"], ["df['date'] = df['date'].map(dt.datetime.toordinal)"], ["element.get_attribute('outerHTML')"], ["df.index.get_loc('bob')"], ["import subprocess"], ["my_dict['third_key'] = 1"], ["x = []"], ["my_list.append(12)"], ["myList.insert(0, 'wuggah')"], ["bytes.fromhex(str)"], ["df.iloc[:, -1]"], ["df[df['Letters'] == 'C'].iloc[0]['Letters']"], ["matrix = [list(x) for x in zip([1, 2, 3], [4, 5, 6])]"], ["type(i)"], ["type(v)"], ["type(v)"], ["type(v)"], ["type(v)"], ["type(variable_name)"], ["next(islice(gen, 4, None), None)"], ["print(\"{0}\".format(word))"], ["' '.join(list)"], ["y = [[] for _ in range(2)]"], ["with open('C:/name/MyDocuments/numbers', 'r') as f:"], ["s = 'it is icy'"], ["s = 'it is icy'"], ["s = 'it is icy'"], ["str.replace(old, '')"], ["df = df.dropna(subset=[1])"], ["[x for x in myList if x.n == 30]"], ["nums = [int(i) for i in intstringlist]"], ["list(map(int, list_of_strings))"], ["print \".\","], ["int(round(2.52 * 100))"], ["import os"], ["import os"], ["import os"], ["df.plot(legend=False)"], ["for x in range(256):"], ["for x in range(256):"], ["for x in range(256):"], ["sum(int(str(i), 2) for i in x)"], ["with open('target', 'w') as f: f.write('line1\\nline2\\nline3\\n')"], ["[item for sublist in data for item in sublist]"], ["print(r'foo\\nbar')"], ["s = s[:-1]"], ["np.diff(x)/2 + x[:-1]"], ["np.mean(x.reshape(-1,2), axis=1)"], ["with open('new.txt', 'r', encoding='utf-8') as f:"], ["sorted(l, key=lambda x: x['time'], reverse=True)"], ["sorted(l, key=lambda x: x['time'], reverse=True)"], ["df[df.apply(lambda row: any(col.str.match('(Hel|Just)') for col in row), axis=1)]"], ["re.findall(r'\\[(.*?)\\]', your_string)"], ["pd.date_range(start='20180101', end='20181231').strftime('%Y%m%d').tolist()"], ["count = string.count('brown')"], ["json.loads(request.body)"], ["import urllib.request"], ["text.split()"], ["text.split(\",\")"], ["line.split()"], ["''.join(c if c.isalpha() else ' ' for c in s)"], ["sorted(list_of_strings, key=lambda s: s[1])"], ["subprocess.call('vasp | tee tee_output', shell=True)"], ["lst = [i for i in lst if isinstance(i, int)]"], ["[i for i in lst if not isinstance(i, str)]"], ["sorted(list_to_be_sorted, key=lambda k: k['name'])"], ["sorted(l, key=lambda x: x['name'], reverse=True)"], ["sorted(list, key=lambda d: d[key])"], ["sorted(list, key=lambda d: d[key])"], ["df.sort_values(by='column_name',ascending=False)"], ["', '.join([str(trans[i]['category']) for i in trans])"], ["''.join(['A', 'B', 'C', 'D'])"], ["import requests"], ["sents = [i for i in sents if not (i.startswith('@$\\t') or i.startswith('#'))]"], ["MyModel.objects.filter(date__hour=12)"], ["sorted(list, key=lambda x: (x['points'], x['time']))"], ["(date(1970, 1, 1) - date(1970, 1, 1)).total_seconds()"], ["re.sub(r'_a(?=\\.\\w+$)', '_suff', 'long.file.name.jpg')"], ["import importlib"], ["int(number)"], ["numlist = [float(i) for i in numlist]"], ["df.to_csv('file.csv', index=False)"], ["json_data = json.loads(urllib.parse.unquote(unescaped))"], ["list(map(chr, range(0, 128)))"], ["with open('newFile', 'wb') as f:"], ["re.search(r'[A-Z][a-z]', string)"], ["list(dict.keys())[-1]"], ["f.write(\"hi there\")"], ["with open('myfile', 'w') as f:"], ["with open('somefile.txt', 'w') as f:"], ["s.encode('ascii', 'ignore')"], ["AuthorizedEmail.objects.aggregate(Max('added'))['added__max']"], ["re.findall(r'[0-9.]+', text)"], ["re.findall(r'[0-9.]+', 'text')"], ["subprocess.call(['powershell.exe', '-ExecutionPolicy', 'Bypass', '-File', 'script.ps1'])"], ["sorted(b, key=lambda x:x[2])"], ["from pycassa.columnfamily import ColumnFamily"], ["datetime.datetime.now()"], ["lst.index(1) if 1 in lst else None"], ["[x-13 for x in a]"], ["random.choice(os.listdir('C:\\\\'))"], ["np.amax(np.abs(x))"], ["import re"], ["re.findall(r'http[s]?://(?:[^/]+\\.)?([^/]+)', document)"], ["mystring.split(' ')"], ["open(path, 'r')"], ["sum(x+y for x, y in zip(data[::2], data[1::2]))"], ["a[..., np.newaxis]"]]