[["os.kill(os.getpid(), signal.SIGUSR1)"], ["bytes.fromhex('4a4b4c').decode('utf-8')"], ["all(x == myList[0] for x in myList)"], ["'Python  :  Very Good'"], ["s = s.encode('cp1251').decode('utf-8')"], ["{k: v for k, v in kwargs.items() if v is not None}"], ["{k: v for k, v in kwargs.items() if v is not None}"], ["import os"], ["''.join(['a', 'b', 'c'])"], ["s1.intersection(s2)"], ["`client.headers.update(headers)`"], ["when.date()"], ["inputString.split('\\n')"], ["s.split('\\n')"], ["':'.join(b)"], ["Entry.objects.first()"], ["np.sum(arr, axis=1)"], ["import warnings"], ["' '.join(l)"], ["python hello.py htmlfilename.htm"], ["datetime.datetime.strptime(str, '%Y-%m-%d %H:%M:%S.%f')"], ["my_float = float(my_string.replace(',', '.'))"], ["float(str.replace(',', '').replace('.', '.'))"], ["import sys"], ["re.split('\\\\W+', 'Words, words, words.')"], ["f = open('Output.txt', 'a')"], ["import urllib.request"], ["import requests"], ["import urllib.request"], ["import urllib.request"], ["import requests"], ["parser.add_argument('--version', action='version', version='%(prog)s 2.0')"], ["del d['c']"], ["merged_df = pd.merge(split_df, csv_df, how='left', left_on='key', right_on='key').add_suffix('_left').add_suffix('_right')"], ["s.split(' ', 4)"], ["input()"], ["app.debug = True"], ["with open('save.txt', 'w') as f:"], ["import numpy as np"], ["import numpy as np"], ["content = content.rsplit(' ', 1)[0]"], ["numpy.array(x)"], ["sum(sum(i) for i in L)"], ["float.fromhex('470FC614')"], ["{k: v*2 for k, v in my_dict.items()}"], ["bash sleep.sh"], ["', '.join(l)"], ["', '.join(myList)"], ["x = list(range(1, 11))[::-1]"], ["s = s.replace('bag, ', '')"], ["s = '.'.join(s.split('.')[::-1])"], ["datetime.datetime.fromtimestamp(s / 1000.0).strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]"], ["import datetime"], ["from datetime import datetime, timedelta"], ["sum(row[column] for row in data)"], ["sum(x[i] for x in array) for i in range(len(array[0]))"], ["import base64"], ["result = {k: v for d in dicts for k, v in d.items()}"], ["flat_dict = {k: ''.join(v for v in vals) for k, vals in dicts.items()}"], ["from flask import request"], ["[item for item in mylist if mylist.count(item) > 1]"], ["os.path.join(os.path.dirname(__file__), 'apps')"], ["sys.path.insert(0, '/path/to/subdir')"], ["c.execute(\"INSERT INTO table_name (column_name) VALUES (?)\", (None,))"], ["flat_list = [item for sublist in list_of_menuitems for item in sublist]"], ["a.extend(b)"], ["list.extend(set)"], ["df.to_csv('np.txt', sep='\\t', index=False)"], ["df.to_csv('c:\\\\data\\\\pandas.txt', index=False)"], ["x.rsplit('-', 1)"], ["str.split('-')[-1]"], ["import ftplib"], ["driver.find_element_by_id('XYZ').send_keys(Keys.ARROW_UP)"], ["np.maximum([2, 3, 4], [1, 5, 2])"], ["l = l[3:] + l[:3]"], ["for file in os.listdir('.'):"], ["for file in os.listdir('source'):"], ["import random"], ["strftime('%f')"], ["results = db.GqlQuery(\"SELECT * FROM Schedule WHERE station = :1\", foo.key())"], ["df[df['column_name'].str.startswith('f', flags=re.IGNORECASE)]"], ["for row in tab:"], ["df = df[~df[['col1', 'col2']].isin([val1, val2]).any(axis=1)]"], ["\"Goals: {}, Penalties: {}\".format(self.goals, self.penalties)"], ["\"({} goals, ${})\".format(goals, penalties)"], ["\"({0.goals} goals, ${0.penalties})\".format(object)"], ["L = [int(item) for sublist in L for item in sublist]"], ["r = int(''.join(map(str, [i for sub in L for i in sub])))"], ["r = [int(i) for sub in L for i in sub]"], ["with open('myfile', 'w') as f:"], ["list = [i for i in list if i != 'X' and i != 'N']"], ["import re"], ["df.astype(bool).sum(axis=0)"], ["import re"], ["lst = 'QH QD JC KD JS'.split()"], ["re.findall(r'>.*<', line)"], ["open(filename, 'w').close()"], ["datetime.datetime.strptime(str, '%Y-%m-%d %H:%M:%S.%f')"], ["index = next(i for i, x in enumerate(thelist) if x[0] == '332')"], ["''.join(c for c in text if c.isalnum() or c.isspace())"], ["''.join(e for e in text if e.isalnum() or e.isspace())"], ["plt.plot(x, y, label=r'$\\text{H}_2\\text{O}$')"], ["plt.plot(x, y, label=r'$\\text{H}_2\\text{O}$')"], ["for sublist in mylist:"], ["lst = [object() for _ in range(100)]"], ["lst = [Object() for _ in range(100)]"], ["soup.select('a[href]:parent.someclass')"], ["df = pd.merge(df1, df2, on='Date_Time')"], ["print(\"The value of str1 is %s\" % str1)"], ["str.split(delimiter)"], ["import os"], ["import os"], ["import os"], ["import os"], ["text = text.replace('H3', 'H1')"], ["import re"], ["list(filter(lambda x: x.isdigit(), aas30dsa20))"], ["soup.find('tag', {'name': 'value'})"], ["records = [record for record in cursor]"], ["import numpy as np"], ["np.concatenate((A, B), axis=0) or np.concatenate((A, B), axis=1)"], ["with open(filepath, 'r') as f:"], ["l.count('a')"], ["import collections"], ["import collections"], ["import collections"], ["l.count('b')"], ["shutil.copy(srcfile, dstdir)"], ["max(x, key=x.get)"], ["max(k for k, v in x.items() if v != 0)"], ["max(x, key=lambda k: x[k]) if x else None"], ["f = open('file.txt', 'r+')"], ["df['c'] = df['a'] + df['b']"], ["del d['ele']"], ["MyModel.objects.update(datetime=F('timestamp') + timedelta(days=365*100))"], ["r = ['it', 'was', 'annoying']"], ["x = '{0:03d}'.format(x+1)"], ["df.index.is_monotonic_increasing or df.index.is_monotonic_decreasing"], ["list(t)"], ["t = tuple(t)"], ["list(level1)"], ["import pprint"], ["df[df['BoolCol'] == True].index"], ["df[df['BoolCol'] == True].index.tolist()"], ["df[df['BoolCol'] == True].index.tolist()"], ["df[df['BoolCol'] == True].index"], ["os.chdir(owd)"], ["c.execute(\"INSERT INTO table_name (column_name) VALUES (?)\", (testfield,))"], ["s = b\"\\\\x89\\\\n\".decode(\"utf-8\")"], ["normal_string = str(raw_string)"], ["normal_string = raw_byte_string.decode('utf-8')"], ["import re; re.findall('((.)\\\\2*)', s)"], ["plt.scatter(np.random.randn(100), np.random.randn(100), c='none')"], ["plt.scatter(x, y, s=50, facecolors='none', edgecolors='blue')"], ["soup.find('div', {'id': 'main-content'}).decompose()"], ["df[df['ids'].str.contains('ball')]"], ["df.reset_index(level=0, inplace=True)"], ["df['index1'] = df.index"], ["df.reset_index(level=0, inplace=True)"], ["b[::-1]"], ["list(zip(a, b))"], ["list(zip(a, b))"], ["', '.join(map(str, list_of_ints))"], ["import requests"], ["s = \"abcd}def}\""], ["[i for i in [1, 2, 3]]"], ["[(i['x'], i['y']) for i in d if 'x' in i and 'y' in i]"], ["import os"], ["d = {x[i]: x[i + 1] for i in range(0, len(x), 2)}"], ["flat_list = [item for sublist in list for item in sublist]"], ["df[df['closing_price'].between(99, 101)]"], ["df.replace('\\n', '<br>', regex=True)"], ["df = df.replace('\\n', '<br>', regex=True)"], ["[word[i:i+2] for i in range(len(word)-1)]"], ["list(map(lambda x: (x, word.count(x)), set(word)))"], ["import re"], ["import re"], ["import re"], ["rng = pd.date_range(start='2016-01-01', periods=13, freq='WOM-2FRI')"], ["matrix = [[0, 0], [0, 0], [0, 0]]"], ["s = s.replace(' ', '_')"], ["os.path.abspath('mydir/myfile.txt')"], ["my_string.split()"], ["import os"], ["r = [sum(l[:i+1]) for i in range(len(l))]"], ["Docs/src/Scripts/temp'.split('/')"], ["np.random.permutation(r)"], ["df['D'] = df['B']"], ["for item in data:"], ["all(predicate(c) for c in string)"], ["import os"], ["cur.execute('SELECT column FROM table WHERE condition')"], ["user_list = list(map(int, user_input.split()))"], ["user_list = [int(i) for i in user.split(',')]"], ["list.sort(key=lambda x: (x[0], x[1]))"], ["ut.sort(key=cmpfun, reverse=True)"], ["ut.sort(key=lambda x: x.count, reverse=True)"], ["ut.sort(key=lambda x: x.count, reverse=True)"], ["driver.find_element_by_link_text('Send').click()"], ["driver.find_element_by_link_text('Send InMail').click()"], ["driver.find_element_by_link_text('Send InMail').click()"], ["'ME' + str(i)"], ["df.sort_values(by='column_name')"], ["with open('infile', 'r') as f:"], ["l.sort(key=len)"], ["import re"], ["import re"], ["t = list(set(t))"], ["list(set(source_list))"], ["list(set(abracadabra))"], ["list(a)"], ["list(a[0])"], ["soup.find(text='Address:').find_next_sibling().get_text()"], ["r = ['@'.join(map(str, t)) for t in l]"], ["r = ['@'.join(map(str, t)) for t in l]"], ["driver.page_source"], ["import re"], ["df[df['B'] > 50]['C'] == 900"], ["sorted(o.items())"], ["sorted(d.keys())"], ["sorted(d.items(), key=lambda x: x[0])"], ["int(\"1\")"], ["int(str)"], ["T1 = [int(i) for i in T1]"], ["subprocess.call(['/bin/sh', './test.sh'])"], ["subprocess.call(['notepad'])"], ["r = [i for i in itertools.chain(*zip(l1, l2))]"], ["'data to be encoded'.encode('utf-8')"], ["bytes('data to be encoded', 'ascii')"], ["with open('text.txt') as f:"], ["getattr(my_object, 'my_str')"], ["from collections import defaultdict"], ["sum(x[0] for x in list_of_tuples)"], ["import ast"], ["[word for word in mystring.split() if word.startswith('$')]"], ["import re"], ["A = [0 if i not in [1, 3, 4] else i for i in A]"], ["numpy.mean(a, axis=0) or numpy.mean(a, axis=1)"], ["import subprocess"], ["import subprocess"], ["with open('file.csv', 'w', newline='') as file:"], ["df.fillna(df.mean())"], ["import datetime"], ["Derived.Base.do()"], ["a[a[:,0]==0 and a[:,1]==1]"], ["re.split('\\s+', str)"], ["max(len(word) for word in words)"], ["result[0]['from_user']"], ["with open('File.txt', 'r') as f: lines = f.readlines()"], ["a = {v: k for k, v in a.items()}"], ["f = open('path/to/FILE_NAME.ext', 'w')"], ["df.groupby('column_name')['column_name'].nunique()"], ["any(k.startswith('EMP$$') for k in dict1.keys())"], ["[v for k, v in dict1.items() if k.startswith('EMP$$')]"], ["df = pd.DataFrame(sf, columns=['email', 'list'])"], ["print('\\t'.join(map(str, list)))"], ["print(u'\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('utf-8'))"], ["Sopet\\xc3\\xb3n.encode('utf-8')"], ["image = image.resize((x, y), Image.ANTIALIAS)"], ["re.findall(r'n.{0}n', s)"], ["print(f\"{1/3*100}%\")"], ["sorted(mylist, key=lambda x: x['title'])"], ["l.sort(key=lambda x: x['title'])"], ["sorted(list, key=lambda k: (k['title'], k['title_url'], k['id']))"], ["import numpy as np"], ["soup.find_all('span', {'class': 'starGryB sp'})"], ["df.to_sql('test', con=conn, schema='a_schema', if_exists='append')"], ["import re"], ["L = list(set(L))"], ["with open('file', 'r') as f:"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(1)"], ["testlist.index(element)"], ["testlist.index(element)"], ["max(lis, key=lambda x: x[1])"], ["max(lis, key=lambda x: x[1])[0]"], ["import time"], ["str(L)"], ["class MyModel(models.Model):"], ["list5.sort(key = lambda x: x.degrees)"], ["You can use the `itemgetter` function from the `operator` module or the lambda function to perform secondary sorting. For example:"], ["(i for i in lst)"], ["newlist = [oldlist.pop(i) for i in removelist]"], ["f = open('yourfile.txt', 'w')"], ["obj.attr"], ["t = (('aa',), ('bb',), ('cc',))"], ["lst = [i[0] for i in tup]"], ["df['column_name'] = df['column_name'].str.replace('char_to_replace', 'replacement_char')"], ["letters, numbers = zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"], ["letters, numbers = zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"], ["a, b = zip(*original)"], ["(i for i in zip(*original))"], ["letters, numbers = zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )])"], ["x = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"], ["json.dumps(float(Decimal('3.9')))"], ["d[\"mynewkey\"] = \"mynewvalue\""], ["data['a'] = 1"], ["data['a'] = 1"], ["data['a'] = 1"], ["max_value = max(map(max, matrix))"], ["round(answer, 2)"], ["import re"], ["df[df.A.duplicated(keep=False)]"], ["with open('myfile', 'r') as f:"], ["with open(filename.txt, 'r') as f:"], ["plt.colorbar(mappable)"], ["df['text'].str.split(expand=True).stack().value_counts()[:100]"], ["import re"], ["list(itertools.combinations((1, 2, 3), 2))"], ["from datetime import datetime, timezone"], ["list2 = [x for x in list1 if x]"], ["list2 = [x for x in list1 if x]"], ["from django.http import JsonResponse"], ["import re"], ["import re"], ["import re"], ["import re"], ["re.findall(r'z(yx)?bc', str)"], ["result = [f'%{i}%' for i in elements]"], ["subprocess.Popen(['background-process', 'arguments'])"], ["[mydict[key] for key in mykeys if key in mydict]"], ["dict([('Name', 'Joe'), ('Age', 22)])"], ["np.mean(data[:,::2], axis=0)"], ["s = s.replace('\"', '\\\\\"')"], ["str.split()"], ["df.plot(kind='bar', stacked=True)"], ["myDictionary = {v: k for k, v in myDictionary.items()}"], ["[i for i, s in enumerate(myList) if 'how' in s and 'what' in s]"], ["isinstance(obj, str)"], ["isinstance(o, str)"], ["isinstance(o, str)"], ["isinstance(o, str)"], ["isinstance(obj_to_test, str)"], ["list2.extend(list1)"], ["list1.append(mylog)"], ["c.append(a)"], ["list1.extend(mylog)"], ["b.append(tuple(a[i][j] for j in [0, 2] for i in [0]))"], ["app.config['SECRET_KEY'] = 'Your_secret_string'"], ["df = pd.DataFrame(list(zip(*tuples)), columns=['out-1', 'out-2'])"], ["stocks_list.index('MSFT')"], ["for label in ax.get_xticklabels():"], ["import re"], ["os.path.dirname(os.path.realpath(__file__))"], ["re.findall(r'\\\\[oO][0-7]{1,3}', str)"], ["re.split('[ ](?=[A-Z]+\\\\b)', input)"], ["re.split('(?=[A-Z])', input)"], ["import requests"], ["with open(filename, 'wb') as f:"], ["lst = [dct[i] for i in lst]"], ["x[x.duplicated(subset='name')]['name']"], ["\"{:.3f}\".format(1.923328437452)"], ["li.sort(key=lambda x: x[1], reverse=True)"], ["ax.set_theta_offset(pi/4)"], ["os.path.isabs(my_path)"], ["len(yourdict)"], ["len(yourdictfile)"], ["df.groupby('id').first()"], ["df[['col1', 'col2', 'col3']] = df['col1'].apply(pd.Series)"], ["import re"], ["sum = sum(float(i) for i in my_list if i)"], ["import subprocess"], ["q = list(q)[::-1]"], ["df.group.plot(kind='bar', color=color)"], ["import re"], ["len(my_list)"], ["len(l)"], ["len(s)"], ["len(my_tuple)"], ["len(my_string)"], ["str = str.replace('\\\\', '')"], ["'obama'.translate(str.maketrans('ab', 'ba'))"], ["import shutil"], ["data['weekday'] = data['my_dt'].dt.weekday_name"], ["x = sorted(x.items(), key=lambda item: item[1], reverse=True)"], ["sorted(x.items(), key=lambda item: item[1], reverse=True)"], ["a = np.append(a, b)"], ["np.concatenate((a, b), axis=0)"], ["np.concatenate((a, b), axis=1)"], ["np.concatenate((a, b), axis=0)"], ["np.concatenate((a, b), axis=0)"], ["import socket"], ["df['day'] = 'sat'"], ["return HttpResponse('Unauthorized', status=401)"], ["app = Flask(__name__, template_folder='wherever')"], ["session.execute('INSERT INTO t1 (SELECT * FROM t2)')"], ["c2.sort(key=lambda x: x[2])"], ["sorted(list, key=lambda x: x[n]) where n is the index of the element you want to sort by."], ["sorted(list, key=lambda x: x[n]) where n is the index of the element you want to sort by."], ["import matplotlib.font_manager"], ["df['date'] = df['date'].apply(lambda x: x.toordinal())"], ["element.get_attribute('outerHTML')"], ["df.index.get_loc('bob')"], ["import subprocess"], ["my_dict['third_key'] = 1"], ["x = np.array([1, 2, 3, 4, 5])"], ["my_list.append(12)"], ["myList.insert(0, 'wuggah')"], ["bytes.fromhex(str)"], ["df.iloc[:, -1]"], ["df[df['Letters'] == 'C'].iloc[0]['column_name']"], ["matrix = [ [1, 2, 3], [4, 5, 6] ]"], ["type(i)"], ["type(v)"], ["type(v)"], ["type(v)"], ["type(v)"], ["type(variable_name)"], ["next(itertools.islice(gen, 4, None))"], ["print(\"The word is: {}\".format(word))"], ["' '.join(list)"], ["y = [ [], [] ]"], ["with open('C:/name/MyDocuments/numbers', 'r') as f:"], ["s = 'it is icy'"], ["s = 'it is icy'"], ["s = 'it is icy'"], ["s = s.replace(char, '')"], ["df = df.dropna(subset=[df.columns[1]])"], ["result = [x for x in myList if x.n == 30]"], ["nums = list(map(int, intstringlist))"], ["r = list(map(int, x))"], ["print(\".\", end=\"\")"], ["int(round(2.52 * 100))"], ["import os"], ["import os"], ["import os"], ["df.plot(legend=False)"], ["for x in range(256):"], ["for x in range(256):"], ["for x in range(256):"], ["sum(int(str(x[i]), 2) for i in range(len(x)))"], ["with open('target', 'w') as f: f.write('\\n'.join(['line1', 'line2', 'line3']))"], ["flat_list = [item for sublist in data for item in sublist]"], ["print(r'foo\\nbar')"], ["s = s[:-1]"], ["y = [x[i] - x[i-1] for i in range(1, len(x))]"], ["np.mean(x.reshape(-1,2), axis=1)"], ["with open('new.txt', 'r', encoding='utf-8') as f:"], ["l.sort(key=lambda x: x['time'], reverse=True)"], ["l.sort(key=lambda x: x['time'], reverse=True)"], ["df[df['column_name'].str.contains('(Hel|Just)')]"], ["import re"], ["pd.date_range(start='01/01/2018', periods=10).strftime('%Y%m%d')"], ["s = 'The big brown fox is brown'"], ["import json"], ["import urllib.request"], ["text.split()"], ["text.split(\",\")"], ["line.split()"], ["s = [''.join(c if c.isalpha() else ' ' for c in x) for x in s]"], ["list_of_strings.sort(key=lambda s: s[1])"], ["os.system('vasp | tee tee_output')"], ["lst = [i for i in lst if isinstance(i, int)]"], ["[i for i in lst if not isinstance(i, str)]"], ["sorted(list_to_be_sorted, key=lambda k: k['name'])"], ["l.sort(key=lambda x: x['name'], reverse=True)"], ["sorted(list, key=lambda x: x['value'])"], ["sorted(list, key=lambda x: x['value'])"], ["df.sort_values(by='column_name',ascending=False)"], ["', '.join([str(trans[i]['category']) for i in trans])"], ["''.join(['A', 'B', 'C', 'D'])"], ["import requests"], ["sents = [sent for sent in sents if not (sent.startswith('@$\\t') or sent.startswith('#'))]"], ["MyModel.objects.filter(my_field_name__hour=22)"], ["list.sort(key=lambda x: (x['points'], x['time']))"], ["import datetime"], ["import re"], ["import importlib"], ["int(number)"], ["numlist = list(map(float, numlist))"], ["df.to_csv('filename.csv', index=False)"], ["import urllib.parse"], ["import string"], ["with open('newFile', 'wb') as f:"], ["re.search('[A-Z][a-z]', string)"], ["list(dict.keys())[-1]"], ["f.write(\"hi there\")"], ["with open('myfile', 'w') as f:"], ["with open('somefile.txt', 'w') as f:"], ["s.encode('ascii', 'ignore')"], ["AuthorizedEmail.objects.aggregate(Max('added'))"], ["import re"], ["import re"], ["subprocess.call(['powershell.exe', '-ExecutionPolicy', 'Bypass', '-File', 'script.ps1'])"], ["b.sort(key=lambda x: x[2])"], ["from pycassa.pool import ConnectionPool"], ["datetime.datetime.now()"], ["lst.index(1) if 1 in lst else '1 not in list'"], ["a = [x-13 for x in a]"], ["import random, os"], ["np.max(np.abs(x))"], ["import re"], ["import re"], ["mystring.split(' ')"], ["with open(path, 'r') as f:"], ["sum(x[i] for i in range(len(x)))"], ["a[..., np.newaxis]"]]